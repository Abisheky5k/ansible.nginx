---
# tasks file for sbaerlocher.nginx

- name: add OS specific variables
  include_vars: "{{ loop_vars }}"
  with_first_found:
    - files:
        - "{{ ansible_distribution }}-{{ ansible_distribution_version }}.yml"
        - "{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml"
        - "{{ ansible_distribution }}.yml"
        - "{{ ansible_os_family }}.yml"
        - "{{ ansible_system }}.yml"
        - "defaults.yml"
      paths:
        - "vars"
  loop_control:
    loop_var: loop_vars
  tags:
    - configuration
    - packages
    - sites

- name: include distribution tasks
  include_tasks: "{{ loop_distribution }}"
  with_first_found:
    - files:
        - "{{ ansible_distribution }}-{{ ansible_distribution_version }}.yml"
        - "{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml"
        - "{{ ansible_distribution }}.yml"
        - "{{ ansible_os_family }}.yml"
        - "{{ ansible_system }}.yml"
        - "defaults.yml"
      paths:
        - "distribution"
  loop_control:
    loop_var: loop_distribution
  tags:
    - configuration
    - packages

- name: creates nginx folders
  become: true
  file:
    path: "{{ loop_directory.path }}"
    state: directory
    owner: "root"
    group: "{{ nginx_user }}"
    mode: "{{ loop_directory.mode }}"
  loop_control:
    loop_var: loop_directory
  with_items:
    - path: "/etc/nginx/"
      mode: 751
    - path: "/etc/nginx/conf.d"
      mode: 751
    - path: "/etc/nginx/sites-available"
      mode: 751
    - path: "/etc/nginx/sites-enabled"
      mode: 751
  tags:
    - configuration

- name: install nginx package
  become: true
  package:
    name: nginx
    state: present
  register: register_install_package
  until: register_install_package is succeeded
  retries: 3
  notify:
    - start nginx
    - enabled nginx
  tags:
    - packages

- name: removing default nginx host
  become: true
  file:
    path: "/etc/nginx/{{ item }}/default"
    state: absent
  with_items:
    - sites-available
    - sites-enabled
  tags:
    - configuration

- name: configuring nginx
  become: true
  template:
    src: nginx.j2
    dest: /etc/nginx/nginx.conf
    owner: root
    group: "{{ nginx_user }}"
    mode: "0640"
  notify:
    - restart nginx
  tags:
    - configuration

- name: adding conf.d
  become: true
  template:
    src: "conf/{{ item }}.j2"
    dest: "/etc/nginx/conf.d/{{ item }}.conf"
    owner: root
    group: "{{ nginx_user }}"
    mode: "0640"
  with_items:
    - amplify
    - default
    - fastcgi
    - gzip
    - mine.types
    - ssl
  notify:
    - restart nginx
  tags:
    - configuration


- name: configuring sites
  become: true
  template:
    src: site.j2
    dest: "/etc/nginx/sites-available/{{ item.site }}"
    owner: root
    group: "{{ nginx_user }}"
    mode: "0640"
  with_items:
    - "{{ sites }}"
  notify:
    - restart nginx
  when: item.site is defined
  tags:
    - sites

- name: disable sites
  become: true
  file:
    path: "/etc/nginx/sites-enabled/{{ item.site }}"
    state: absent
    group: "{{ nginx_user }}"
  when: not item.enabled
  with_items:
    - "{{ sites }}"
  notify:
    - restart nginx
  tags:
    - sites

- name: enabling sites
  become: true
  file:
    src: "/etc/nginx/sites-available/{{ item.site }}"
    dest: "/etc/nginx/sites-enabled/{{ item.site }}"
    owner: root
    group: "{{ nginx_user }}"
    mode: "0640"
    state: link
  when: item.enabled
  with_items:
    - "{{ sites }}"
  notify:
    - restart nginx
  tags:
    - sites

## SSL
- block:

    - name: Creates SSL Home
      file:
        path: "/etc/ssl/nginx/{{ item.site }}"
        state: directory
        owner: root
        group: "{{ nginx_user }}"
        mode: 0550
      with_items: "{{ sites }}"
      tags:
        - sites

    ## inline SSL
    - block:

        - name: Create Key
          copy:
            content: "{{ item.ssl.key }}"
            dest: "/etc/ssl/nginx/{{ item.site }}/{{ item.site }}.key"
            owner: root
            group: "{{ nginx_user }}"
            mode: 0400
          with_items: "{{ sites }}"
          notify:
            - restart nginx
          when: item.ssl.key is defined
          tags:
            - sites

        - name: Create CA
          copy:
            content: "{{ item.ssl.ca }}"
            dest: "/etc/ssl/nginx/{{ item.site }}/{{ item.site }}.pem"
            owner: root
            group: "{{ nginx_user }}"
            mode: 0440
          with_items: "{{ sites }}"
          notify:
            - restart nginx
          when: item.ssl.ca is defined
          tags:
            - sites
    # inline SSL End

    # Certbot
    - block:

        - name: Creates Key from Certbot
          file:
            src: "/etc/letsencrypt/live/{{ item.site }}/privkey.pem"
            dest: "/etc/ssl/nginx/{{ item.site }}/{{ item.site }}.key"
            state: link
            owner: root
            group: "{{ nginx_user }}"
            mode: 0400
          notify:
            - restart nginx
          with_items: "{{ sites }}"
          tags:
            - sites

        - name: Creates CA from Certbot
          file:
            src: "/etc/letsencrypt/live/{{ item.site }}/fullchain.pem"
            dest: "/etc/ssl/nginx/{{ item.site }}/{{ item.site }}.pem"
            state: link
            owner: root
            group: "{{ nginx_user }}"
            mode: 0440
          notify:
            - restart nginx
          with_items: "{{ sites }}"
          tags:
            - sites

      when: item.ssl.certbot is defined
    # Certbot End

    # Empty
    - block:

        - name: Creates Empty Key
          file:
            src: "/etc/ssl/nginx/{{ nginx_default_ssl }}/{{ nginx_default_ssl }}.key"
            dest: "/etc/ssl/nginx/{{ item.site }}/{{ item.site }}.key"
            state: link
            owner: root
            group: "{{ nginx_user }}"
            mode: 0400
            force: true
          notify:
            - restart nginx
          with_items: "{{ sites }}"
          tags:
            - sites

        - name: Creates Empty CA
          file:
            src: "/etc/ssl/nginx/{{ nginx_default_ssl }}/{{ nginx_default_ssl }}.pem"
            dest: "/etc/ssl/nginx/{{ item.site }}/{{ item.site }}.pem"
            state: link
            owner: root
            group: "{{ nginx_user }}"
            mode: 0440
            force: true
          notify:
            - restart nginx
          with_items: "{{ sites }}"
          tags:
            - sites

      when: not item.ssl and nginx_default_ssl != item.site and item.ssl.certbot is not defined
      # Empty End

# Alias
- block:

    ## Alias inline SSL
    - block:

        - name: Create alias Key
          copy:
            content: "{{ item.1.key }}"
            dest: "/etc/ssl/nginx/{{ item.0.site }}/{{ item.1.name }}.key"
            owner: root
            group: "{{ nginx_user }}"
            mode: 0400
          with_subelements:
            - "{{ sites }}"
            - alias
          notify:
            - restart nginx
          when: item.1.key is defined
          tags:
            - sites

        - name: Create alias CA
          copy:
            content: "{{ item.1.ca }}"
            dest: "/etc/ssl/nginx/{{ item.0.site }}/{{ item.1.name }}.pem"
            owner: root
            group: "{{ nginx_user }}"
            mode: 0440
          with_subelements:
            - "{{ sites }}"
            - alias
          notify:
            - restart nginx
          when: item.1.ca is defined
          tags:
            - sites
    # Alias inline SSL End

    # Alias Empty
    - block:

        - name: Creates Empty alias Key
          file:
            src: "/etc/ssl/nginx/{{ nginx_default_ssl }}/{{ nginx_default_ssl }}.key"
            dest: "/etc/ssl/nginx/{{ item.0.site }}/{{ item.1.name }}.key"
            state: link
            owner: root
            group: "{{ nginx_user }}"
            mode: 0400
            force: true
          with_subelements:
            - "{{ sites }}"
            - alias
          notify:
            - restart nginx
          when: item.1.key is not defined
          tags:
            - sites

        - name: Creates Empty alias CA
          file:
            src: "/etc/ssl/nginx/{{ nginx_default_ssl }}/{{ nginx_default_ssl }}.pem"
            dest: "/etc/ssl/nginx/{{ item.0.site }}/{{ item.1.name }}.pem"
            state: link
            owner: root
            group: "{{ nginx_user }}"
            mode: 0440
            force: true
          with_subelements:
            - "{{ sites }}"
            - alias
          notify:
            - restart nginx
          when: item.1.ca is not defined
          tags:
            - sites
    # Alias Empty End

  # Alias End
  when: item.1 is defined

- name: Generate DHE key-exchange
  become: true
  command: openssl dhparam -dsaparam -out /etc/ssl/certs/dhparam.pem 4096
  args:
    chdir: /etc/ssl/certs
    creates: dhparam.pem
  notify:
    - restart nginx
  tags:
    - configuration
