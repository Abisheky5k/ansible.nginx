---
# tasks file for sbaerlocher.nginx

- name: add OS specific variables
  include_vars: "{{ item }}"
  with_first_found:
    - files:
        - "{{ ansible_distribution }}-{{ ansible_distribution_version }}.yml"
        - "{{ ansible_distribution }}.yml"
        - "{{ ansible_os_family }}.yml"
        - "default.yml"
      paths: vars
  tags:
    - configuration
    - packages

- name: add official nginx repo
  yum_repository:
    name: nginx
    description: official nginx repo
    baseurl: http://nginx.org/packages/centos/$releasever/$basearch/
    gpgcheck: false
    enabled: true
  when: ansible_distribution == 'CentOS'
  tags:
    - packages

- name: install nginx
  package:
    name: nginx
  notify:
    - start nginx
    - enabled nginx
    - removing default nginx host
  tags:
    - packages

- name: configuring nginx
  template:
    src: nginx.j2
    dest: /etc/nginx/nginx.conf
    owner: root
    group: root
    mode: "0644"
  notify:
    - restart nginx
  tags:
    - configuration

- name: adding conf.d
  template:
    src: "conf/{{ item }}.j2"
    dest: "/etc/nginx/conf.d/{{ item }}.conf"
    owner: root
    group: root
    mode: "0644"
  with_items:
    - ssl
    - gzip
    - fastcgi
  notify:
    - restart nginx
  tags:
    - configuration

- name: creates directory sites-available
  file:
    path: /etc/nginx/sites-available
    state: directory
  tags:
    - configuration

- name: creates directory sites-enabled
  file:
    path: /etc/nginx/sites-enabled
    state: directory
  tags:
    - configuration

- name: configuring sites
  template:
    src: site.j2
    dest: "/etc/nginx/sites-available/{{ item.site }}"
    owner: root
    group: root
    mode: "0644"
  with_items:
    - "{{ sites }}"
  notify:
    - restart nginx
  when: item.site is defined
  tags:
    - configuration

- name: disable sites
  file:
    path: "/etc/nginx/sites-enabled/{{ item.site }}"
    state: absent
  when: not item.enabled
  with_items:
    - "{{ sites }}"
  notify:
    - restart nginx
  tags:
    - configuration

- name: enabling sites
  file:
    src: "/etc/nginx/sites-available/{{ item.site }}"
    dest: "/etc/nginx/sites-enabled/{{ item.site }}"
    owner: root
    group: root
    mode: "0644"
    state: link
  when: item.enabled
  with_items:
    - "{{ sites }}"
  notify:
    - restart nginx
  tags:
    - configuration

- name: Creates directory
  file:
    path: "/home/{{ item.site }}"
    state: directory
  with_items: "{{ sites }}"
  when: item.site is defined
  tags:
    - configuration


## SSL
- block:

    - name: Creates SSL Home
      file:
        path: "/etc/ssl/nginx/{{ item.site }}"
        state: directory
        mode: 0644
      with_items: "{{ sites }}"

    ## inline SSL
    - block:

        - name: Create Key
          copy:
            content: "{{ item.ssl.key }}"
            dest: "/etc/ssl/nginx/{{ item.site }}/{{ item.site }}.key"
            mode: 0644
          with_items: "{{ sites }}"
          when: item.ssl.key is defined

        - name: Create CA
          copy:
            content: "{{ item.ssl.ca }}"
            dest: "/etc/ssl/nginx/{{ item.site }}/{{ item.site }}.pem"
            mode: 0644
          with_items: "{{ sites }}"
          when: item.ssl.ca is defined
    # inline SSL End

    # Certbot
    - block:

        - name: Creates Key from Certbot
          file:
            src: "/etc/letsencrypt/live/{{ item.site }}/privkey.pem"
            dest: "/etc/ssl/nginx/{{ item.site }}/{{ item.site }}.key"
            state: link
            mode: 0644
          with_items: "{{ sites }}"

        - name: Creates CA from Certbot
          file:
            src: "/etc/letsencrypt/live/{{ item.site }}/fullchain.pem"
            dest: "/etc/ssl/nginx/{{ item.site }}/{{ item.site }}.pem"
            state: link
            mode: 0644
          with_items: "{{ sites }}"

      when: item.nginx.certbot
    # Certbot End

    # Empty
    - block:

        - name: Creates Empty Key
          file:
            src: "/etc/ssl/nginx/{{ nginx_default_ssl }}/{{ nginx_default_ssl }}.key"
            dest: "/etc/ssl/nginx/{{ item.site }}/{{ item.site }}.key"
            state: link
            mode: 0644
            force: true
          with_items: "{{ sites }}"

        - name: Creates Empty CA
          file:
            src: "/etc/ssl/nginx/{{ nginx_default_ssl }}/{{ nginx_default_ssl }}.pem"
            dest: "/etc/ssl/nginx/{{ item.site }}/{{ item.site }}.pem"
            state: link
            mode: 0644
            force: true
          with_items: "{{ sites }}"

      when: not item.nginx.certbot and not item.ssl and nginx_default_ssl != item.site
    # Empty End
  when: item.nginx.ssl
  tags:
    - configuration

# Alias
- block:

    # Alias Empty
    - block:

        - name: Creates Empty alias Key
          file:
            src: "/etc/ssl/nginx/{{ nginx_default_ssl }}/{{ nginx_default_ssl }}.key"
            dest: "/etc/ssl/nginx/{{ item.0.site }}/{{ item.1 }}.key"
            state: link
            mode: 0644
            force: true
          with_subelements:
            - "{{ sites }}"
            - alias

        - name: Creates Empty alias CA
          file:
            src: "/etc/ssl/nginx/{{ nginx_default_ssl }}/{{ nginx_default_ssl }}.pem"
            dest: "/etc/ssl/nginx/{{ item.0.site }}/{{ item.1 }}.pem"
            state: link
            mode: 0644
            force: true
          with_subelements:
            - "{{ sites }}"
            - alias
    # Alias Empty End

  # Alias End
  when: item.0.nginx.ssl and item.1 is defined
  tags:
    - configuration

- name: Generate DHE key-exchange
  become: true
  command: openssl dhparam -dsaparam -out /etc/ssl/certs/dhparam.pem arg1
  args:
    creates: /etc/ssl/certs/dhparam.pem
  notify:
    - restart nginx
  tags:
    - configuration
