---
# tasks file for sbaerlocher.nginx

- name: add OS specific variables
  include_vars: "{{ item }}"
  with_first_found:
    - files:
        - "{{ ansible_distribution }}-{{ ansible_distribution_version }}.yml"
        - "{{ ansible_distribution }}.yml"
        - "{{ ansible_os_family }}.yml"
        - "default.yml"
      paths: vars

- name: add OS specific task
  include: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}-{{ ansible_distribution_version }}.yml"
    - "{{ ansible_distribution }}.yml"
    - "{{ ansible_os_family }}.yml"
    - "defaults.yml"

- name: configuring nginx
  template:
    src: nginx.j2
    dest: /etc/nginx/nginx.conf
    owner: root
    group: root
    mode: "0644"
  notify: 
    - restart nginx
    - enabled nginx

- name: adding conf.d
  copy:
    src: conf.d
    dest: /etc/nginx
    owner: root
    group: root
    mode: "0644"

- name: creates directory sites-available
  file: path=/etc/nginx/sites-available state=directory

- name: creates directory sites-enabled
  file: path=/etc/nginx/sites-enabled state=directory

- name: delete directory sites-enabled
  file: path=/etc/nginx/sites-enabled/* state=absent

- name: removing default host
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - /etc/nginx/sites-available/default

- name: configuring sites
  template:
    src: site.j2
    dest: "/etc/nginx/sites-available/{{ item.site }}"
    owner: root
    group: root
    mode: "0644"
  with_items: 
    - "{{ sites }}"
  when: item.site is defined
  notify: 
    - restart nginx
    - enabled nginx

- name: enabling sites
  file:
    src: "/etc/nginx/sites-available/{{ item.site }}"
    dest: "/etc/nginx/sites-enabled/{{ item.site }}"
    state: link
  when: item.enabled == 1
  with_items: 
    - "{{ sites }}"
  notify: 
    - restart nginx
    - enabled nginx

- name: Creates directory
  file: path=/home/{{ item.site }} state=directory
  with_items: "{{ sites }}"
  when: nginx_sites is defined

#- name: Creates directory
#  file: path={{ nginx_webroot }}/{{ item.site }}/web state=directory
#  with_items: "{{ sites }}"
#  when: nginx_sites is defined
#
#- name: Creates directory
#  file: path={{ nginx_webroot }}/{{ item.site }}/ssl state=directory
#  with_items: "{{ sites }}"
#  when: nginx_sites is defined

- name: Generate DHE key-exchange
  command: sudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 4096 creates=/etc/ssl/certs/dhparam.pem
  notify: 
    - restart nginx
    - enabled nginx